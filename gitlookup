Logo
Home
Dojos
Achievements
Profile
Pricing
Sign in
dojo
Git Cheatsheet
Start learning for free
ShortcutFoo uses a Spaced Repetition System that adapts to your training.
scf keyboard
Git Basics
git init
Initialize a repository
git status
Show status of working tree
git add file.txt
Start tracking file.txt
git add main.txt
Stage modified file main.txt
git diff
Show what's changed but not yet staged
git commit
Commit changes
git commit -a
Stage files and commit
git mv main.txt file.txt
Rename main.txt to file.txt
git fetch develop
Pull data from remote 'develop' without merging
git pull origin develop
Fetch and merge branch 'develop' from origin
git clone url
Create local copy of remote repository at 'url'
scf keyboard
Branching
git branch
Show current branches
git push origin master
Push master branch to origin server
git branch -v
Show last commit on all branches
git checkout master
Switch to branch 'master'
git branch feature1
Create new branch called 'feature1'
git checkout -b feature2
Create branch 'feature2' and switch to it
git branch -d mybranch
Delete branch 'mybranch'
git branch --merged
Show branches already merged into current branch
git branch --no-merged
Show branches not yet merged into current branch
git branch -D fix
Force delete branch 'fix' that is not yet merged
git push origin feature1
Push local branch 'feature1' to origin
git push staging develop:master
Push develop branch to remote staging master
git checkout -b fix1 origin/fix1
Create local branch 'fix1' based off origin branch
git checkout --track origin/fix2
Create tracking branch 'fix2' based off origin
git push origin :fix2
Delete remote branch 'fix2' from origin
scf keyboard
Merging / Rebasing
git mergetool
Use graphical merge tool
git commit
Finalize merge after resolving conflicts
git merge feature1
Merge branch 'feature1' with current branch
git add file.txt
Mark file.txt as resolved after merge
git rebase develop
Rebase changes made on current branch over develop
git rebase master develop
Rebase master onto develop without checking it out
git rebase --onto master 1a 1b
Rebase master onto branch 1b made from branch 1a
scf keyboard
Remotes
git remote
Show remote servers you have configured
git remote -v
Show remote servers with URL displayed
git remote add myurl url
Add remote server 'url' with shortname 'myurl'
git remote rename server1 server2
Rename remote 'server1' to 'server2'
git remote rm server1
Remove remote 'server1'
git remote show origin
Show info about remote origin
scf keyboard
Commit Logs
git log
Show commit logs
git log -p -2
Show last two commits with diffs
git log --stat
Show commit logs with stats
git log --pretty=oneline
Show commit logs one per line
git log --graph
Show commit logs with ascii graph
git log --since=1.week
Show commit log for the last week
git blame -L 10,15 file.rb
Show prev commits for each lines 10-15 of file.rb
scf keyboard
Undo / Change History
git rm --cached main.txt
Remove main.txt from staging but keep in working
git commit --amend
Replace last commit with whats in staging
git checkout -- file.txt
Discard changes to file.txt
git reset HEAD file.txt
Unstage file.txt
git commit --amend
Modify last commit message
git rebase -i HEAD`3
Make changes to the last 3 commits
scf keyboard
Using Tags
git tag
Show available tags
git tag -a v3.0
Create annotated tag 'v3.0'
git show v3.0
Show info for tag v3.0
git tag -s v3.0
Create signed tag v3.0
git tag v2.1-lw
Create lightweight tag v2.1
git tag -v v3.0
Verify signed tag v3.0
git tag -a v2.2 8feb
Tag previous commit '8feb' as v2.2
git push origin v2.2
Push tag v2.2 to origin
git push origin --tags
Push all local tags to origin
scf keyboard
Using Stashes
git stash
Stash changes without committing
git stash list
Show stores stashes
git stash apply
Reapply most recent stash
git stash apply stash@2
Reapply stash 2
git stash apply --index
Reapply stashed changes along with staged changes
git stash drop stash@{2}
Drop stash 2
git stash pop
Apply most recent stash and drop from stack
git stash branch mybranch
Create branch 'mybranch' from stash
git stash clear
Delete all stashes
git diff --staged
Show what's staged but not yet committed
git diff --check
Check for whitespace errors before committing
scf keyboard
Using Bisect
git bisect start
Start binary search of commits to find bad commit
git bisect bad
Mark current commit as broken during bisect
git bisect good v2.2
Mark v2.2 as last known good commit during bisect
git bisect good
Mark current commit as good during bisect
git bisect reset
Reset HEAD when finished with bisect
git bisect run test.sh
Run 'test.sh' on each commit during bisect
achievement-star
Blog
About
Privacy Policy
Terms of Service
Tournaments
Pricing
Facebook
Twitter
© 2025 ShortcutFoo, LLC. All rights reserved.



Stepper 
import { useState } from "react";
import "bootstrap/dist/css/bootstrap.min.css";

export default function BootstrapStepper() {
  const steps = ["thing1", "thing2", "thing3", "thing4"];
  const [currentStep, setCurrentStep] = useState(0);

  return (
    <div className="d-flex flex-column align-items-center justify-content-center vh-100 bg-dark text-white">
      {/* Stepper Navigation */}
      <div className="d-flex align-items-center w-75 position-relative">
        {steps.map((step, index) => (
          <div key={index} className="d-flex flex-column align-items-center position-relative" style={{ cursor: "pointer", zIndex: 10 }} onClick={() => setCurrentStep(index)}>
            {/* Step Circle */}
            <div className={`rounded-circle d-flex align-items-center justify-content-center border border-4 ${currentStep >= index ? "border-primary bg-primary text-white" : "border-secondary bg-dark text-secondary"}`} 
              style={{ width: "50px", height: "50px", fontSize: "18px" }}>
              {index + 1}
            </div>
            {/* Step Label */}
            <span className="mt-2">{step}</span>
          </div>
        ))}

        {/* Connecting Line */}
        <div className="position-absolute top-50 start-0 w-100 bg-secondary" style={{ height: "5px", transform: "translateY(-50%)", zIndex: 0 }}>
          <div className="bg-primary" style={{ height: "5px", width: `${(currentStep / (steps.length - 1)) * 100}%`, transition: "width 0.3s ease" }}></div>
        </div>
      </div>

      {/* Step Content */}
      <div className="mt-4 display-4">{steps[currentStep]}</div>
    </div>
  );
}


import { useState } from "react";

export default function Base64ImageCarousel({ images }) {
  const [currentIndex, setCurrentIndex] = useState(0);

  if (!images || images.length === 0) {
    return <p className="text-center text-gray-500">No images available</p>;
  }

  const nextSlide = () => {
    setCurrentIndex((prevIndex) => (prevIndex + 1) % images.length);
  };

  const prevSlide = () => {
    setCurrentIndex((prevIndex) =>
      prevIndex === 0 ? images.length - 1 : prevIndex - 1
    );
  };

  return (
    <div className="relative w-full max-w-2xl mx-auto">
      {/* Image Display */}
      <div className="overflow-hidden rounded-xl shadow-lg">
        <img
          src={`data:image/png;base64,${images[currentIndex]}`}
          alt={`Slide ${currentIndex + 1}`}
          className="w-full h-64 object-cover transition-opacity duration-500"
        />
      </div>

      {/* Navigation Buttons */}
      <button
        onClick={prevSlide}
        className="absolute top-1/2 left-4 transform -translate-y-1/2 bg-black/50 text-white p-2 rounded-full"
      >
        ◀
      </button>
      <button
        onClick={nextSlide}
        className="absolute top-1/2 right-4 transform -translate-y-1/2 bg-black/50 text-white p-2 rounded-full"
      >
        ▶
      </button>

      {/* Dots Indicator */}
      <div className="flex justify-center mt-2 space-x-2">
        {images.map((_, index) => (
          <span
            key={index}
            className={`w-3 h-3 rounded-full ${
              index === currentIndex ? "bg-gray-800" : "bg-gray-300"
            }`}
          ></span>
        ))}
      </div>
    </div>
  );
}

grouped images

import { useState, useEffect } from "react";

export default function GroupedImageCarousel({ items }) {
  const [groupedImages, setGroupedImages] = useState({});

  useEffect(() => {
    // Group images by name prefix (before "-groupX")
    const groups = {};
    items.forEach(({ name, image }) => {
      const baseName = name.split("-group")[0]; // Extract group name
      if (!groups[baseName]) {
        groups[baseName] = [];
      }
      groups[baseName].push({ name, image });
    });

    setGroupedImages(groups);
  }, [items]);

  return (
    <div className="flex flex-col space-y-6">
      {Object.entries(groupedImages).map(([groupName, images]) => (
        <div key={groupName} className="p-4 border-2 border-gray-400 rounded-lg shadow-md">
          <h2 className="text-lg font-bold text-gray-700 mb-2">{groupName}</h2>
          <div className="flex space-x-4 overflow-x-auto">
            {images.map(({ name, image }, index) => (
              <img
                key={index}
                src={`data:image/png;base64,${image}`}
                alt={name}
                className="w-40 h-40 object-cover rounded-md"
              />
            ))}
          </div>
        </div>
      ))}
    </div>
  );
}
